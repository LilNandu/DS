#include <stdio.h>
#include <string.h>

int precedence(char c) {
    if (c == '^') return 3;
    if (c == '*' || c == '/') return 2;
    if (c == '+' || c == '-') return 1;
    return 0;
}

void infixToPostfix(char s[]) {
    char result[1000], stack[1000];
    int resIdx = 0, stackIdx = -1;

    for (int i = 0; s[i]; i++) {
        char c = s[i];

        // Check if the character is an operand (a-z, A-Z, or 0-9)
        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9')) {
            result[resIdx++] = c;  // Add operands directly
        } else if (c == '(') {
            stack[++stackIdx] = c;  // Push '(' onto the stack
        } else if (c == ')') {
            while (stackIdx >= 0 && stack[stackIdx] != '(')
                result[resIdx++] = stack[stackIdx--];
            stackIdx--;  // Remove '('
        } else {  // Operator case
            while (stackIdx >= 0 && precedence(c) <= precedence(stack[stackIdx]))
                result[resIdx++] = stack[stackIdx--];  // Pop stack
            stack[++stackIdx] = c;  // Push current operator
        }
    }

    while (stackIdx >= 0)  // Append remaining operators
        result[resIdx++] = stack[stackIdx--];

    result[resIdx] = '\0';  // Null-terminate the result
    printf("%s\n", result);  // Output the postfix expression
}

int main() {
    infixToPostfix("a*b+c*d");
    return 0;
}
